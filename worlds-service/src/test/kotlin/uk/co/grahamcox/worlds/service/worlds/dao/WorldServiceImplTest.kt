package uk.co.grahamcox.worlds.service.worlds.dao

import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.function.Executable
import uk.co.grahamcox.worlds.service.model.Resource
import uk.co.grahamcox.worlds.service.users.UserId
import uk.co.grahamcox.worlds.service.worlds.WorldData
import uk.co.grahamcox.worlds.service.worlds.WorldId
import uk.co.grahamcox.worlds.service.worlds.WorldNotFoundException
import java.time.Instant
import java.util.*

/**
 * Unit tests for the World Service
 */
internal class WorldServiceImplTest {
    companion object {
        /** The World ID to use in the tests */
        private const val WORLD_ID = "00000000-0000-0000-0000-000000000001"

        /** The Owner ID to use in the tests */
        private const val OWNER_ID = "00000000-0000-0000-0000-000000000002"
    }

    /** The mock DAO */
    private val dao = mockk<WorldsRepository>()

    /** The test subject */
    private val testSubject = WorldServiceImpl(dao)

    /**
     * Test getting a world by ID when the world doesn't exist
     */
    @Test
    fun getUnknownWorldById() {
        every { dao.findById(UUID.fromString(WORLD_ID)) } returns Optional.empty()

        Assertions.assertThrows(WorldNotFoundException::class.java) {
            testSubject.getById(WorldId(WORLD_ID))
        }

        verify { dao.findById(UUID.fromString(WORLD_ID)) }
    }

    /**
     * Test getting a world by ID when the world does exist
     */
    @Test
    fun getKnownWorldById() {
        val worldEntity = generateWorldEntity()

        every { dao.findById(UUID.fromString(WorldServiceImplTest.WORLD_ID)) } returns Optional.of(worldEntity)

        val world = testSubject.getById(WorldId(WorldServiceImplTest.WORLD_ID))

        verifyGeneratedWorld(world)
        verify { dao.findById(UUID.fromString(WorldServiceImplTest.WORLD_ID)) }
    }

    /**
     * Generate a World Entity to return from DAO methods
     */
    private fun generateWorldEntity(): WorldEntity {
        val worldEntity = WorldEntity(
                id = UUID.fromString(WORLD_ID),
                version = UUID.fromString("00000000-0000-0000-0000-000000000002"),
                created = Instant.parse("2018-05-22T18:53:00Z"),
                updated = Instant.parse("2018-05-22T18:54:00Z"),
                name = "testworld",
                displayName = "Test World",
                description = "This is a super cool world",
                owner = UUID.fromString(OWNER_ID)
        )
        return worldEntity
    }

    /**
     * Verify that a World resource matches the details generated by generateWorldEntity()
     */
    private fun verifyGeneratedWorld(world: Resource<WorldId, WorldData>) {
        Assertions.assertAll(
                Executable { Assertions.assertEquals(WorldId(WorldServiceImplTest.WORLD_ID), world.identity.id) },
                Executable { Assertions.assertEquals("00000000-0000-0000-0000-000000000002", world.identity.version) },
                Executable { Assertions.assertEquals(Instant.parse("2018-05-22T18:53:00Z"), world.identity.created) },
                Executable { Assertions.assertEquals(Instant.parse("2018-05-22T18:54:00Z"), world.identity.updated) },

                Executable { Assertions.assertEquals("testworld", world.data.name) },
                Executable { Assertions.assertEquals("Test World", world.data.displayName) },
                Executable { Assertions.assertEquals("This is a super cool world", world.data.description) },
                Executable { Assertions.assertEquals(UserId(OWNER_ID), world.data.owner) }
        )
    }
}
